# Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. 
# Поскольку разобраться в его кричалках не настолько просто, насколько легко он их придумывает,
# Вам стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов 
# (т.е. число гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова, 
# если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг от друга пробелами. 
# Стихотворение  Винни-Пух вбивает в программу с клавиатуры. 
# В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, 
# если с ритмом все не в порядке

# *Пример:*

# **Ввод:** пара-ра-рам рам-пам-папам па-ра-па-да    
#     **Вывод:** Парам пам-пам  

# def stix(fraza):
#     slogi = 0
#     slogi_v_fraze = 0
#     for i in range(len(fraza)):
#         if fraza[i] == " ":
#             slogi_v_fraze = slogi
#             slogi = 0        
#         else:
#             slogi+=1            
#     if slogi == slogi_v_fraze:
#         return print("Парам пам-пам")
#     else:
#         return print("Пам парам")
# list = 'пара-ра-рам рам-пам-папам па-ра-па-да'
# glasnie = 'а, у, о, ы, и, э, я, ю, ё, , е'
# fraza = [x for x in list if x in glasnie]
# stix(fraza)

# Задача 36: Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца.
# Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны. 
# Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля). 
# Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, 
# у операции умножения.

# *Пример:*

# **Ввод:** `print_operation_table(lambda x, y: x * y) ` 
# **Вывод:**

# def print_operation_table(operation, num_rows=6, num_columns=6):
#     for row in range(1, num_rows+1):
#         for column in range(1, num_columns+1):
#             print(operation(row,column), end = " ")
#         print()
#     # table = [[operation(row, column) for column in range(1, num_columns + 1)] for row in range(1, num_rows + 1)]
#     # for row in table:
#     #     print(*[f"{x:>3}" for x in row]) 
# print_operation_table(lambda x, y: x * y)

